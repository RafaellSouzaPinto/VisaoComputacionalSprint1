import cv2   
import pickle
import oracledb
from datetime import datetime
import os
import sys
import logging
from colorama import init, Fore
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
import numpy as np

ORACLE_DSN      = "oracle.fiap.com.br:1521/ORCL"
ORACLE_USER     = "RMxxx" #insira seu user
ORACLE_PASSWORD = "xxxxxx" #insira seu password

imagem_default = "mottu.png"
ROIS_FILE       = "vagas_rois.pkl" 
THRESH          = 100
OCC_RATIO       = 0.10

imagem_atual = imagem_default

init(autoreset=True)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def criar_tabelas(cur):
    cur.execute("""
        BEGIN
            EXECUTE IMMEDIATE '
                CREATE TABLE VAGAS_STATUS (
                    VAGA_ID    NUMBER PRIMARY KEY,
                    STATUS     VARCHAR2(10),
                    UPDATED_AT TIMESTAMP
                )';
        EXCEPTION
            WHEN OTHERS THEN
                IF SQLCODE != -955 THEN RAISE; END IF;
        END;
    """)
    cur.execute("""
        BEGIN
            EXECUTE IMMEDIATE '
                CREATE TABLE VAGAS_HISTORICO (
                    ID         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                    VAGA_ID    NUMBER,
                    STATUS     VARCHAR2(10),
                    TIMESTAMP  TIMESTAMP,
                    PRIMARY KEY (ID)
                )';
        EXCEPTION
            WHEN OTHERS THEN
                IF SQLCODE != -955 THEN RAISE; END IF;
        END;
    """)
    cur.execute("""
        BEGIN
            EXECUTE IMMEDIATE '
                CREATE TABLE CONFIG_IMAGEM (
                    ID NUMBER PRIMARY KEY,
                    IMAGEM_ATUAL VARCHAR2(255)
                )';
        EXCEPTION
            WHEN OTHERS THEN
                IF SQLCODE != -955 THEN RAISE; END IF;
        END;
    """)
    cur.execute("""
        MERGE INTO CONFIG_IMAGEM c
        USING (SELECT 1 AS ID FROM dual) src
        ON (c.ID = src.ID)
        WHEN NOT MATCHED THEN
            INSERT (ID, IMAGEM_ATUAL) VALUES (1, :img)
    """, {'img': imagem_default})

def obter_imagem_atual():
    global imagem_atual
    conn = None
    cur = None
    try:
        conn = oracledb.connect(user=ORACLE_USER, password=ORACLE_PASSWORD, dsn=ORACLE_DSN)
        cur = conn.cursor()
        criar_tabelas(cur)
        conn.commit()
        cur.execute("SELECT IMAGEM_ATUAL FROM CONFIG_IMAGEM WHERE ID = 1")
        row = cur.fetchone()
        if row:
            imagem_atual = row[0]
    except oracledb.Error as e:
        logging.error(Fore.RED + f"[!] Erro ao obter imagem atual: {e}")
    finally:
        if cur: cur.close()
        if conn: conn.close()


def atualizar_imagem_atual(nova_img):
    global imagem_atual
    imagem_atual = nova_img
    conn = None
    cur = None
    try:
        conn = oracledb.connect(user=ORACLE_USER, password=ORACLE_PASSWORD, dsn=ORACLE_DSN)
        cur = conn.cursor()
        cur.execute("UPDATE CONFIG_IMAGEM SET IMAGEM_ATUAL = :img WHERE ID = 1", {'img': imagem_atual})
        conn.commit()
        logging.info(Fore.GREEN + f"[✓] Imagem atualizada no banco: {imagem_atual}")
    except oracledb.Error as e:
        logging.error(Fore.RED + f"[!] Erro ao atualizar imagem no banco: {e}")
    finally:
        if cur: cur.close()
        if conn: conn.close()


def calibrar_rois():
    global imagem_atual
    try:
        img = cv2.imread(imagem_atual)
        if img is None:
            logging.error(f"Imagem não encontrada: {imagem_atual}")
            return
        bboxes = cv2.selectROIs("[1/2] Seleção de Vagas", img, showCrosshair=True, fromCenter=False)
        cv2.destroyAllWindows()
        if len(bboxes) == 0:
            logging.warning("Nenhuma ROI selecionada.")
            return
        with open(ROIS_FILE, "wb") as f:
            pickle.dump(bboxes, f)
        logging.info(f"ROIs salvas em {ROIS_FILE} ({len(bboxes)} vagas)")
    except Exception as e:
        logging.error(Fore.RED + f"[!] Erro na calibração de ROIs: {e}")


def registrar_historico(cur, vaga_id, status):
    try:
        cur.execute("""
            INSERT INTO VAGAS_HISTORICO (VAGA_ID, STATUS, TIMESTAMP)
            VALUES (:vaga_id, :status, SYSTIMESTAMP)
        """, {'vaga_id': vaga_id, 'status': status})
    except oracledb.Error as e:
        logging.error(Fore.RED + f"[!] Erro ao registrar histórico: {e}")
def detectar_vagas():
    global imagem_atual
    if not os.path.exists(ROIS_FILE):
        logging.error(Fore.RED + "ARQUIVO DE ROIs não existe. Calibre as vagas primeiro.")
        return
    img = cv2.imread(imagem_atual)
    if img is None:
        logging.error(Fore.RED + f"Imagem não encontrada: {imagem_atual}")
        return
    with open(ROIS_FILE, "rb") as f:
        rois = pickle.load(f)

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    conn = oracledb.connect(user=ORACLE_USER, password=ORACLE_PASSWORD, dsn=ORACLE_DSN)
    cur = conn.cursor()
    criar_tabelas(cur)

    for idx, (x, y, w, h) in enumerate(rois, start=1):
        bx, by = int(0.1*w), int(0.1*h)
        crop = gray[y+by:y+h-by, x+bx:x+w-bx]
        _, thresh = cv2.threshold(crop, THRESH, 255, cv2.THRESH_BINARY_INV)
        dark = cv2.countNonZero(thresh)
        area = crop.shape[0] * crop.shape[1]
        status = "OCUPADO" if dark > area * OCC_RATIO else "LIVRE"
        cur.execute("""
            MERGE INTO VAGAS_STATUS v
            USING (SELECT :v_id AS VAGA_ID FROM dual) src
            ON (v.VAGA_ID = src.VAGA_ID)
            WHEN MATCHED THEN
                UPDATE SET STATUS = :status, UPDATED_AT = SYSTIMESTAMP
            WHEN NOT MATCHED THEN
                INSERT (VAGA_ID, STATUS, UPDATED_AT)
                VALUES (:v_id, :status, SYSTIMESTAMP)
        """, {'v_id': idx, 'status': status})
        registrar_historico(cur, idx, status)
        color = (0,0,255) if status=="OCUPADO" else (0,255,0)
        cv2.rectangle(img, (x,y), (x+w,y+h), color, 2)
        cv2.putText(img, f"Vaga {idx}: {status}", (x, y-8), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    conn.commit()
    cur.close()
    conn.close()
    logging.info(Fore.GREEN + "[✓] Detecção e sincronização concluídas.")
    cv2.imshow("[2/2] Vagas Detectadas", img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def ver_tempo_medio():
    conn = oracledb.connect(user=ORACLE_USER, password=ORACLE_PASSWORD, dsn=ORACLE_DSN)
    cur = conn.cursor()
    cur.execute("SELECT VAGA_ID, ROUND(AVG(MINUTOS_OCUPACAO),2) TEMPO_MEDIO FROM (SELECT VAGA_ID, EXTRACT(MINUTE FROM (LEAD(TIMESTAMP) OVER (PARTITION BY VAGA_ID ORDER BY TIMESTAMP)-TIMESTAMP)) MINUTOS_OCUPACAO FROM VAGAS_HISTORICO WHERE STATUS='OCUPADO') WHERE MINUTOS_OCUPACAO IS NOT NULL GROUP BY VAGA_ID ORDER BY VAGA_ID")
    resultados = cur.fetchall()
    if not resultados:
        logging.info(Fore.YELLOW + "Nenhum dado suficiente para calcular tempo médio.")
    else:
        vagas = [str(r[0]) for r in resultados]
        tempos = [r[1] for r in resultados]
        fig, ax = plt.subplots(figsize=(10,6))
        bars = ax.bar(vagas, tempos)
        for bar in bars:
            h = bar.get_height()
            ax.text(bar.get_x()+bar.get_width()/2, h, f"{h:.2f}", ha='center', va='bottom')
        ax.set_xlabel('Vaga')
        ax.set_ylabel('Tempo médio (min)')
        ax.set_title('Tempo Médio de Ocupação por Vaga')
        plt.show()
    cur.close()
    conn.close()
    input(Fore.CYAN + "\nPressione Enter para voltar...")

def mostrar_imagem_atual():
    global imagem_atual
    conn = oracledb.connect(user=ORACLE_USER, password=ORACLE_PASSWORD, dsn=ORACLE_DSN)
    cur = conn.cursor()
    cur.execute("SELECT VAGA_ID, STATUS, TO_CHAR(UPDATED_AT,'DD/MM/YYYY HH24:MI:SS') FROM VAGAS_STATUS ORDER BY VAGA_ID")
    vagas = cur.fetchall()
    print(Fore.CYAN + f"\nImagem atual: {imagem_atual}\n")
    if not vagas:
        print(Fore.YELLOW + "Nenhum status cadastrado.")
    else:
        for vid, st, dt in vagas:
            cor = Fore.RED if st=='OCUPADO' else Fore.GREEN
            print(f"Vaga {vid}: {cor}{st} {Fore.BLUE}({dt})")
    cur.close()
    conn.close()
    input(Fore.CYAN + "\nPressione Enter para voltar...")

def trocar_imagem():
    while True:
        nova = input(Fore.CYAN + "Nova imagem (ou 'cancelar'): ")
        if nova.lower()=='cancelar':
            return
        if not os.path.exists(nova):
            print(Fore.RED + "Arquivo não encontrado.")
        else:
            atualizar_imagem_atual(nova)
            if os.path.exists(ROIS_FILE): os.remove(ROIS_FILE)
            print(Fore.YELLOW + "Calibração antiga removida.")
            calibrar_rois()
            return

def sair():
    print(Fore.MAGENTA + "Obrigado por Utilizar o Sistema Geosense!")
    sys.exit(0)

def menu():
    while True:
        os.system('cls' if os.name=='nt' else 'clear')
        print(Fore.BLUE + "=== Geosense: Sistema de Vagas ===")
        print("1. Calibrar Vagas")
        print("2. Detectar Vagas")
        print("3. Ver Tempo Médio")
        print("4. Mostrar Status Atual")
        print("5. Trocar Imagem")
        print("6. Sair")
        opc = input(Fore.CYAN + "Escolha (1-6): ")
        if opc=='1': calibrar_rois()
        elif opc=='2': detectar_vagas()
        elif opc=='3': ver_tempo_medio()
        elif opc=='4': mostrar_imagem_atual()
        elif opc=='5': trocar_imagem()
        elif opc=='6': sair()
        else: print(Fore.RED + "Opção inválida.")

if __name__ == "__main__":
    obter_imagem_atual()
    menu()
